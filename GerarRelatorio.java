/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.agendamedica;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.dao.MedicoDAO;
import model.dao.PacienteDAO;

/**
 *
 * @author super
 */
public class GerarRelatorio extends javax.swing.JFrame {

    /**
     * Creates new form GerarRelatorio
     */
    public GerarRelatorio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dataInicialTxt = new javax.swing.JTextField();
        dataFinalTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsultas = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GERAR RELATORIO");
        setMaximumSize(new java.awt.Dimension(960, 693));
        setMinimumSize(new java.awt.Dimension(960, 693));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("  GERAR RELATORIO");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(370, 0, 350, 47);

        jLabel2.setText("Data Inicial: (formato dd-mm-aaaa)");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(310, 110, 190, 16);

        jLabel3.setText("Data Final: (formato dd-mm-aaaa)");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(310, 150, 225, 16);
        getContentPane().add(dataInicialTxt);
        dataInicialTxt.setBounds(550, 110, 102, 22);
        getContentPane().add(dataFinalTxt);
        dataFinalTxt.setBounds(550, 150, 102, 22);

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(220, 610, 72, 23);

        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(590, 610, 72, 23);

        jtConsultas = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        jtConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome Medico", "Nome Paciente", "Data", "Horario"
            }
        ));
        jtConsultas.getTableHeader().setResizingAllowed(false);
        jtConsultas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtConsultas);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(140, 220, 688, 365);

        jButton3.setText("Limpar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(390, 610, 72, 23);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/blackkk.png"))); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(0, -20, 1000, 790);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        PosLogin frame = new PosLogin();
        frame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        int index = table.getRowCount();
        for(int x=0;x<index;x++){
            System.out.println(x);
            table.removeRow(0);
        }
        MedicoDAO daom = new MedicoDAO();
        PacienteDAO daop = new PacienteDAO();
        if(Cadastro.getMedico()!=null&&Cadastro.getPaciente()==null){
            Medico medico = Cadastro.getMedico();
            String dataInicial = dataInicialTxt.getText();
            String dataFinal = dataFinalTxt.getText();
            String[] vetorDataInicial = dataInicial.split("(?!^)");
            String[] vetorDataFinal = dataFinal.split("(?!^)");
            if(vetorDataInicial.length!=10||vetorDataFinal.length!=10){
                JOptionPane.showMessageDialog(null, "Ol치, datas inseridas inv치lidas, certifique-se que colocou a data no formato dd-mm-aaaa");
            }
            else{
            ArrayList<Consulta> consultas;
                try {
                    consultas = medico.gerarRelatorio(dataInicial, dataFinal);
                    if(consultas.size()>0){
                    for(Consulta consulta:consultas){
                        Date data;
                        DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                        SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
                        SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd-MM-yyyy");
                        data = formatoOriginal.parse(consulta.getData());
                        String dataFormatada = formatoDesejado.format(data);
                        Object[] dados = {daom.returnMedico(consulta.getIdMedico()).getNome(),daop.returnPaciente(consulta.getIdPaciente()).getNome(),dataFormatada,consulta.getHorario()};
                        dtmConsultas.addRow(dados);
                    }
            }else{
                            JOptionPane.showMessageDialog(null, "Voce nao possui consultas no periodo informado.");
                            }
                } catch (ParseException ex) {
                    Logger.getLogger(GerarRelatorio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if(Cadastro.getMedico()==null&&Cadastro.getPaciente()!=null){
            Paciente paciente = Cadastro.getPaciente();
            String dataInicial = dataInicialTxt.getText();
            String dataFinal = dataFinalTxt.getText();
            String[] vetorDataInicial = dataInicial.split("(?!^)");
            String[] vetorDataFinal = dataFinal.split("(?!^)");
            if(vetorDataInicial.length!=10||vetorDataFinal.length!=10){
                JOptionPane.showMessageDialog(null, "Ol치, datas inseridas inv치lidas, certifique-se que colocou a data no formato dd-mm-aaaa");
            }
            else{
            ArrayList<Consulta> consultas;
                try {
                    consultas = paciente.gerarRelatorio(dataInicial, dataFinal);
                    if(consultas.size()>0){
                    for(Consulta consulta:consultas){
                        Date data;
                        DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                        SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
                        SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd-MM-yyyy");
                        data = formatoOriginal.parse(consulta.getData());
                        String dataFormatada = formatoDesejado.format(data);
                        Object[] dados = {daom.returnMedico(consulta.getIdMedico()).getNome(),daop.returnPaciente(consulta.getIdPaciente()).getNome(),dataFormatada,consulta.getHorario()};
                        dtmConsultas.addRow(dados);
                    }
                    }else{
                        JOptionPane.showMessageDialog(null, "Voce nao possui consultas no periodo informado.");
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(GerarRelatorio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        int index = table.getRowCount();
        for(int x=0;x<index;x++){
            System.out.println(x);
            table.removeRow(0);
        }
      
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        MedicoDAO daom = new MedicoDAO();
        PacienteDAO daop = new PacienteDAO();
        if(Cadastro.getMedico()!=null&&Cadastro.getPaciente()==null){
            Medico medico = Cadastro.getMedico();
            ArrayList<Consulta> consultas;
            consultas = medico.getConsultas();
            if(consultas.size()>0){
                    for(Consulta consulta:consultas){
                        try {
                            Date data;
                            DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                            SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
                            SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd-MM-yyyy");
                            data = formatoOriginal.parse(consulta.getData());
                            String dataFormatada = formatoDesejado.format(data);
                            Object[] dados = {daom.returnMedico(consulta.getIdMedico()).getNome(),daop.returnPaciente(consulta.getIdPaciente()).getNome(),dataFormatada,consulta.getHorario()};
                            dtmConsultas.addRow(dados);
                        } catch (ParseException ex) {
                            Logger.getLogger(GerarRelatorio.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    medico.resetConsultas();
                    }else{
                        JOptionPane.showMessageDialog(null, "Voce nao possui consultas no periodo informado.");
                    }
        }else{
            Paciente paciente = Cadastro.getPaciente();
            ArrayList<Consulta> consultas;
            consultas = paciente.getConsultas();
            if(consultas.size()>0){
                    for(Consulta consulta:consultas){
                        try {
                            Date data;
                            DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                            SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
                            SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd-MM-yyyy");
                            data = formatoOriginal.parse(consulta.getData());
                            String dataFormatada = formatoDesejado.format(data);
                            Object[] dados = {daom.returnMedico(consulta.getIdMedico()).getNome(),daop.returnPaciente(consulta.getIdPaciente()).getNome(),dataFormatada,consulta.getHorario()};
                            dtmConsultas.addRow(dados);
                        } catch (ParseException ex) {
                            Logger.getLogger(GerarRelatorio.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    paciente.resetConsultas();
                    }else{
                        JOptionPane.showMessageDialog(null, "Voce nao possui consultas no periodo informado.");
                    }
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerarRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerarRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerarRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerarRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GerarRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dataFinalTxt;
    private javax.swing.JTextField dataInicialTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtConsultas;
    // End of variables declaration//GEN-END:variables
}
